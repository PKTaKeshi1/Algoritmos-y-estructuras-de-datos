package btree;

/**
 * Clase que representa un Árbol B genérico.
 * @param <E> Tipo de dato que extiende Comparable (para ordenamiento de claves)
 */
public class BTree<E extends Comparable<E>> {
    private BNode<E> root;     // Raíz del árbol B
    private int orden;         // Orden del árbol (máximo número de hijos por nodo)
    private boolean up;        // Indica si se debe propagar una división hacia arriba
    private BNode<E> nDes;     // Nodo derecho generado tras una división

    /**
     * Constructor del árbol B.
     * @param orden Orden del árbol B (mínimo 3)
     */
    public BTree(int orden) {
        this.orden = orden;
        this.root = null;
    }

    /**
     * Verifica si el árbol está vacío.
     * @return true si no hay nodos, false en caso contrario.
     */
    public boolean isEmpty() {
        return this.root == null;
    }

    /**
     * Devuelve la raíz del árbol.
     * @return Nodo raíz.
     */
    public BNode<E> getRoot() {
        return this.root;
    }

    /**
     * Inserta una clave en el árbol B.
     * @param cl Clave a insertar.
     */
    public void insert(E cl) {
        up = false;
        E mediana;
        BNode<E> pnew;
        mediana = push(this.root, cl);

        if (up) {
            // Crear nueva raíz si hubo división en el nivel superior
            pnew = new BNode<E>(this.orden);
            pnew.count = 1;
            pnew.keys.set(0, mediana);
            pnew.childs.set(0, this.root);
            pnew.childs.set(1, nDes);
            this.root = pnew;
        }
    }

    /**
     * Inserta recursivamente una clave, manejando divisiones si es necesario.
     * @param current Nodo actual.
     * @param cl Clave a insertar.
     * @return Mediana promovida (si hubo división).
     */
    private E push(BNode<E> current, E cl) {
        int pos[] = new int[1];
        E mediana;

        if (current == null) {
            // Inserción en hoja nueva
            up = true;
            nDes = null;
            return cl;
        } else {
            boolean fl = current.searchNode(cl, pos);
            if (fl) {
                System.out.println("Item duplicado\n");
                up = false;
                return null;
            }

            mediana = push(current.childs.get(pos[0]), cl);

            if (up) {
                if (current.nodeFull(this.orden - 1)) {
                    mediana = dividedNode(current, mediana, pos[0]);
                } else {
                    putNode(current, mediana, nDes, pos[0]);
                    up = false;
                }
            }

            return mediana;
        }
    }

    /**
     * Inserta una clave y un hijo en un nodo no lleno.
     * @param current Nodo actual.
     * @param cl Clave a insertar.
     * @param rd Hijo derecho correspondiente.
     * @param k Posición de inserción.
     */
    private void putNode(BNode<E> current, E cl, BNode<E> rd, int k) {
        int i;
        for (i = current.count - 1; i >= k; i--) {
            current.keys.set(i + 1, current.keys.get(i));
            current.childs.set(i + 2, current.childs.get(i + 1));
        }
        current.keys.set(k, cl);
        current.childs.set(k + 1, rd);
        current.count++;
    }

    /**
     * Divide un nodo lleno y reestructura el árbol.
     * @param current Nodo a dividir.
     * @param cl Clave a insertar.
     * @param k Posición de la clave.
     * @return Clave mediana que se sube al nodo padre.
     */
    private E dividedNode(BNode<E> current, E cl, int k) {
        BNode<E> rd = nDes;
        int i, posMdna;

        // Determinar posición de división
        posMdna = (k <= this.orden / 2) ? this.orden / 2 : this.orden / 2 + 1;
        nDes = new BNode<E>(this.orden);

        // Mover claves e hijos al nuevo nodo
        for (i = posMdna; i < this.orden - 1; i++) {
            nDes.keys.set(i - posMdna, current.keys.get(i));
            nDes.childs.set(i - posMdna + 1, current.childs.get(i + 1));
        }

        nDes.count = (this.orden - 1) - posMdna;
        current.count = posMdna;

        // Insertar la clave en el nodo correspondiente
        if (k <= this.orden / 2) {
            putNode(current, cl, rd, k);
        } else {
            putNode(nDes, cl, rd, k - posMdna);
        }

        // Subir la mediana
        E median = current.keys.get(current.count - 1);
        nDes.childs.set(0, current.childs.get(current.count));
        current.count--;

        return median;
    }

    /**
     * Devuelve una representación en cadena del árbol.
     * @return String con el contenido del árbol por niveles.
     */
    @Override
    public String toString() {
        String s = "";
        if (isEmpty())
            s += "BTree is empty...";
        else
            s = writeTree(this.root, 0);
        return s;
    }

    /**
     * Recorre el árbol y construye una representación por niveles.
     * @param current Nodo actual.
     * @param nivel Nivel actual del árbol.
     * @return String del recorrido desde este nodo.
     */
    private String writeTree(BNode<E> current, int nivel) {
        StringBuilder sb = new StringBuilder();

        if (current != null) {
            sb.append("Nivel ").append(nivel).append(" - Claves: ")
              .append(current.keys.subList(0, current.count)).append("\n");
            for (int i = 0; i <= current.count; i++) {
                if (current.childs.get(i) != null) {
                    sb.append(writeTree(current.childs.get(i), nivel + 1));
                }
            }
        }

        return sb.toString();
    }

    /**
     * Busca una clave en el árbol B.
     * @param cl Clave a buscar.
     * @return true si la clave existe, false en otro caso.
     * Imprime el nodo y posición si se encuentra.
     */
    public boolean search(E cl) {
        return searchRecursive(this.root, cl);
    }

    /**
     * Búsqueda recursiva de una clave.
     * @param current Nodo actual.
     * @param cl Clave a buscar.
     * @return true si se encuentra, false en otro caso.
     */
    private boolean searchRecursive(BNode<E> current, E cl) {
        if (current == null) return false;

        for (int i = 0; i < current.count; i++) {
            int cmp = cl.compareTo(current.keys.get(i));
            if (cmp == 0) {
                System.out.println(cl + " se encuentra en el nodo " + current.hashCode() + " en la posición " + i);
                return true;
            } else if (cmp < 0) {
                return searchRecursive(current.childs.get(i), cl);
            }
        }

        return searchRecursive(current.childs.get(current.count), cl);
    }
}
