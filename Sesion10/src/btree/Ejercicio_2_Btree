package btree;

/**
 * Clase que representa un Árbol B genérico.
 * @param <E> Tipo de dato que extiende Comparable (para ordenamiento de claves)
 */
public class BTree<E extends Comparable<E>> {
    private BNode<E> root;     // Raíz del árbol B
    private int orden;         // Orden del árbol (máximo número de hijos por nodo)
    private boolean up;        // Indica si se debe propagar una división hacia arriba
    private BNode<E> nDes;     // Nodo derecho generado tras una división

    /**
     * Constructor del árbol B.
     * @param orden Orden del árbol B (mínimo 3)
     */
    public BTree(int orden) {
        this.orden = orden;
        this.root = null;
    }

    /**
     * Verifica si el árbol está vacío.
     * @return true si no hay nodos, false en caso contrario.
     */
    public boolean isEmpty() {
        return this.root == null;
    }

    /**
     * Devuelve la raíz del árbol.
     * @return Nodo raíz.
     */
    public BNode<E> getRoot() {
        return this.root;
    }

    /**
     * Inserta una clave en el árbol B.
     * @param cl Clave a insertar.
     */
    public void insert(E cl) {
        up = false;
        E mediana;
        BNode<E> pnew;
        mediana = push(this.root, cl);

        if (up) {
            // Crear nueva raíz si hubo división en el nivel superior
            pnew = new BNode<E>(this.orden);
            pnew.count = 1;
            pnew.keys.set(0, mediana);
            pnew.childs.set(0, this.root);
            pnew.childs.set(1, nDes);
            this.root = pnew;
        }
    }

    /**
     * Inserta recursivamente una clave, manejando divisiones si es necesario.
     * @param current Nodo actual.
     * @param cl Clave a insertar.
     * @return Mediana promovida (si hubo división).
     */
    private E push(BNode<E> current, E cl) {
        int pos[] = new int[1];
        E mediana;

        if (current == null) {
            // Inserción en hoja nueva
            up = true;
            nDes = null;
            return cl;
        } else {
            boolean fl = current.searchNode(cl, pos);
            if (fl) {
                System.out.println("Item duplicado\n");
                up = false;
                return null;
            }

            mediana = push(current.childs.get(pos[0]), cl);

            if (up) {
                if (current.nodeFull(this.orden - 1)) {
                    mediana = dividedNode(current, mediana, pos[0]);
                } else {
                    putNode(current, mediana, nDes, pos[0]);
                    up = false;
                }
            }

            return mediana;
        }
    }

    /**
     * Inserta una clave y un hijo en un nodo no lleno.
     * @param current Nodo actual.
     * @param cl Clave a insertar.
     * @param rd Hijo derecho correspondiente.
     * @param k Posición de inserción.
     */
    private void putNode(BNode<E> current, E cl, BNode<E> rd, int k) {
        int i;
        for (i = current.count - 1; i >= k; i--) {
            current.keys.set(i + 1, current.keys.get(i));
            current.childs.set(i + 2, current.childs.get(i + 1));
        }
        current.keys.set(k, cl);
        current.childs.set(k + 1, rd);
        current.count++;
    }

    /**
     * Divide un nodo lleno y reestructura el árbol.
     * @param current Nodo a dividir.
     * @param cl Clave a insertar.
     * @param k Posición de la clave.
     * @return Clave mediana que se sube al nodo padre.
     */
    private E dividedNode(BNode<E> current, E cl, int k) {
        BNode<E> rd = nDes;
        int i, posMdna;

        // Determinar posición de división
        posMdna = (k <= this.orden / 2) ? this.orden / 2 : this.orden / 2 + 1;
        nDes = new BNode<E>(this.orden);

        // Mover claves e hijos al nuevo nodo
        for (i = posMdna; i < this.orden - 1; i++) {
            nDes.keys.set(i - posMdna, current.keys.get(i));
            nDes.childs.set(i - posMdna + 1, current.childs.get(i + 1));
        }

        nDes.count = (this.orden - 1) - posMdna;
        current.count = posMdna;

        // Insertar la clave en el nodo correspondiente
        if (k <= this.orden / 2) {
            putNode(current, cl, rd, k);
        } else {
            putNode(nDes, cl, rd, k - posMdna);
        }

        // Subir la mediana
        E median = current.keys.get(current.count - 1);
        nDes.childs.set(0, current.childs.get(current.count));
        current.count--;

        return median;
    }

    /**
     * Devuelve una representación en cadena del árbol.
     * @return String con el contenido del árbol por niveles.
     */
    @Override
    public String toString() {
        String s = "";
        if (isEmpty())
            s += "BTree is empty...";
        else
            s = writeTree(this.root, 0);
        return s;
    }

    /**
     * Recorre el árbol y construye una representación por niveles.
     * @param current Nodo actual.
     * @param nivel Nivel actual del árbol.
     * @return String del recorrido desde este nodo.
     */
    private String writeTree(BNode<E> current, int nivel) {
        StringBuilder sb = new StringBuilder();

        if (current != null) {
            sb.append("Nivel ").append(nivel).append(" - Claves: ")
              .append(current.keys.subList(0, current.count)).append("\n");
            for (int i = 0; i <= current.count; i++) {
                if (current.childs.get(i) != null) {
                    sb.append(writeTree(current.childs.get(i), nivel + 1));
                }
            }
        }

        return sb.toString();
    }

    /**
     * Busca una clave en el árbol B.
     * @param cl Clave a buscar.
     * @return true si la clave existe, false en otro caso.
     * Imprime el nodo y posición si se encuentra.
     */
    public boolean search(E cl) {
        return searchRecursive(this.root, cl);
    }

    /**
     * Búsqueda recursiva de una clave.
     * @param current Nodo actual.
     * @param cl Clave a buscar.
     * @return true si se encuentra, false en otro caso.
     */
    private boolean searchRecursive(BNode<E> current, E cl) {
        if (current == null) return false;

        for (int i = 0; i < current.count; i++) {
            int cmp = cl.compareTo(current.keys.get(i));
            if (cmp == 0) {
                System.out.println(cl + " se encuentra en el nodo " + current.hashCode() + " en la posición " + i);
                return true;
            } else if (cmp < 0) {
                return searchRecursive(current.childs.get(i), cl);
            }
        }

        return searchRecursive(current.childs.get(current.count), cl);
    }
    public void remove(E cl) {
        if (!isEmpty()) {
            delete(root, cl);

            // Si la raíz queda vacía y tiene hijos, desciende un nivel
            if (root.count == 0 && !root.isLeaf()) {
             root = root.childs.get(0);
            }

            // Si la raíz queda vacía y no tiene hijos, el árbol queda vacío
            if (root.count == 0 && root.isLeaf()) {
            root = null;
            }
        }
    }
    private void delete(BNode<E> node, E key) {
        int idx = 0;

        // Buscar posición de la clave
        while (idx < node.count && key.compareTo(node.keys.get(idx)) > 0) {
            idx++;
        }

        // Caso 1: clave encontrada en el nodo
        if (idx < node.count && key.equals(node.keys.get(idx))) {
            if (node.isLeaf()) {
                // Caso 1a: nodo hoja -> eliminar directamente
                node.keys.remove(idx);
                node.childs.remove(idx + 1);
                node.count--;
            } else {
                // Caso 1b: nodo interno
                deleteInternal(node, key, idx);
            }
        } else {
            // Caso 2: clave no está en este nodo
            if (node.isLeaf()) {
                System.out.println("Clave " + key + " no encontrada.");
                return;
            }

            BNode<E> child = node.childs.get(idx);

            // Verificar si el hijo tiene el mínimo de claves
            if (child.count == (orden - 1) / 2) {
                fixChild(node, idx);
            }

            delete(node.childs.get(idx), key);
        }
    }
    private void deleteInternal(BNode<E> node, E key, int idx) {
        BNode<E> pred = node.childs.get(idx);
        if (pred.count > (orden - 1) / 2) {
            E predecessor = getMax(pred);
            node.keys.set(idx, predecessor);
            delete(pred, predecessor);
        } else {
            BNode<E> succ = node.childs.get(idx + 1);
            if (succ.count > (orden - 1) / 2) {
                E successor = getMin(succ);
                node.keys.set(idx, successor);
                delete(succ, successor);
            } else {
            merge(node, idx);
            delete(pred, key);
            }
        }
    }
    private E getMin(BNode<E> node) {
        while (!node.isLeaf()) {
            node = node.childs.get(0);
        }
        return node.keys.get(0);
    }

    private E getMax(BNode<E> node) {
        while (!node.isLeaf()) {
            node = node.childs.get(node.count);
        }
        return node.keys.get(node.count - 1);
    }
    private void merge(BNode<E> node, int idx) {
        BNode<E> left = node.childs.get(idx);
        BNode<E> right = node.childs.get(idx + 1);

        // Insertar clave del nodo padre
        left.keys.add(left.count, node.keys.get(idx));

        // Copiar claves y hijos del hijo derecho
        for (int i = 0; i < right.count; i++) {
            left.keys.add(right.keys.get(i));
        }
        for (int i = 0; i <= right.count; i++) {
            left.childs.add(right.childs.get(i));
        }

        left.count += 1 + right.count;

        // Eliminar clave del padre y puntero al hijo derecho
        node.keys.remove(idx);
        node.childs.remove(idx + 1);
        node.count--;
    }
    private void fixChild(BNode<E> node, int idx) {
        if (idx > 0 && node.childs.get(idx - 1).count > (orden - 1) / 2) {
            borrowFromLeft(node, idx);
        } else if (idx < node.count && node.childs.get(idx + 1).count > (orden - 1) / 2) {
            borrowFromRight(node, idx);
        } else {
            if (idx < node.count) {
                merge(node, idx);
            } else {
                merge(node, idx - 1);
            }
        }
    }
    private void borrowFromLeft(BNode<E> node, int idx) {
        BNode<E> left = node.childs.get(idx - 1);
        BNode<E> current = node.childs.get(idx);

        current.keys.add(0, node.keys.get(idx - 1));
        node.keys.set(idx - 1, left.keys.remove(left.count - 1));
        current.childs.add(0, left.childs.remove(left.count));
        current.count++;
        left.count--;
    }
    private void borrowFromRight(BNode<E> node, int idx) {
        BNode<E> right = node.childs.get(idx + 1);
        BNode<E> current = node.childs.get(idx);

        current.keys.add(node.keys.get(idx));
        node.keys.set(idx, right.keys.remove(0));
        current.childs.add(right.childs.remove(0));
        current.count++;
        right.count--;
    }
}
